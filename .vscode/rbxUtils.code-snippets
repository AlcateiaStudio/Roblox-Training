{
   "RobloxService": {
      "scope": "luau",
      "prefix": "rbxservice",
      "body": [
         "local ${1:ServiceName} = game:GetService(\"${1:ServiceName}\")"
      ]
   },
   "Preamble": {
      "scope": "luau",
      "prefix": "preamble",
      "body": [
         "-- Authors: ${1:NAME}",
         "-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
         "--[=[",
         "\t@class ${TM_FILENAME_BASE}",
         "]=]",
         "",
      ],
   },
   "Import": {
      "prefix": "import",
      "body": [
         "local ${1:Name} = require(\"${2}${1:Name}\")",
      ]
   },
   "ImportPackage": {
      "prefix": "importpackage",
      "body": [
         "local ${1:Name} = require(\"@Packages/${1:Name}\")",
      ]
   },
   "Section Header": {
      "prefix": [
         "sectionheader"
      ],
      "body": [
         "--------------------------------------------------------------------------------",
         "--// ${0:SectionName} //--",
         "--------------------------------------------------------------------------------",
      ],
      "description": "An organizational header for a code section."
   },
   "Sub Header": {
      "prefix": [
         "subheader"
      ],
      "body": [
         "--// ${0:SectionName} //--",
      ],
      "description": "A small header for a code section."
   },
   "moonwavedoc": {
      "scope": "luau",
      "prefix": "moonwavetype",
      "body": [
         "--[=[",
         "\t@within $TM_FILENAME_BASE",
         "\t@type ${0:TypeName}",
         "]=]"
      ]
   },
   "module": {
      "scope": "luau",
      "prefix": "module",
      "body": [
         "local ${1:ModuleName} = {}",
         "",
         "return ${1:ModuleName}",
      ]
   },
   "LifetimeObject": {
      "prefix": "lifetimeobject",
      "body": [
         "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
         "",
         "local LifetimeObject = require(ReplicatedStorage.Shared.System.LifetimeObject)",
         "",
         "local ${1:ServiceName} = {}",
         "",
         "function ${1:ServiceName}:OnAwake()",
         "\t$0",
         "end",
         "",
         "function ${1:ServiceName}:OnStart()",
         "",
         "end",
         "",
         "return LifetimeObject.extend(${1:ServiceName}, \"${1:ServiceName}\")"
      ],
      "description": "Create a new LifetimeObject for use in your game"
   },
   "LifeTimeObjectForUI": {
      "prefix": "uilifetimeobject",
      "body": [
         "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
         "local Players = game:GetService(\"Players\")",
         "",
         "local LifetimeObject = require(ReplicatedStorage.Shared.System.LifetimeObject)",
         "",
         "local ${1:ServiceName} = {}",
         "",
         "type ${2:UIType} = {",
         "\tScreenGui: ScreenGui,",
         "}",
         "",
         "local ${3:UIVariable}: ${2:UIType}",
         "local localPlayer = Players.LocalPlayer",
         "",
         "function ${1:ServiceName}:OnAwake()",
         "\tif not ${3:UIVariable} then",
         "\t\tself:GetUI()",
         "\tend",
         "\t$0",
         "end",
         "",
         "function ${1:ServiceName}:OnStart()",
         "",
         "end",
         "",
         "function ${1:ServiceName}:GetUI()",
         "\t${3:UIVariable} = {",
         "\t\tScreenGui = nil,",
         "\t}",
         "",
         "\tlocal playerGui = localPlayer:WaitForChild(\"PlayerGui\")",
         "\t${3:UIVariable}.ScreenGui = playerGui:WaitForChild(\"${4:ScreenGuiName}\")",
         "",
         "\t-- Validation",
         "\tassert(${3:UIVariable}.ScreenGui.ResetOnSpawn == false, \"UI should not reset on spawn\")",
         "end",
         "",
         "return LifetimeObject.extend(${1:ServiceName}, \"${1:ServiceName}\")"
      ]
   }
}