--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
Queue.Reliable[6] = table.create(256)
Queue.Reliable[9] = table.create(256)
local function ReadEVENT_RaceStarted(): (nil)
	return nil
end

local function ReadEVENT_RaceFinished(): (nil)
	return nil
end

local function ReadEVENT_PlayerPlacementChanged(): (number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function ReadEVENT_PlayerTakeDamage(): (number, Vector3)
	-- Read BLOCK: 26 bytes
	local BLOCK_START = Read(26)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value1
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value1 = -math.huge
		else
			Value1 = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value1 = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value1 = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value1 = if Encoded // 0x8000 == 1 then -Result else Result
	end
	local X = buffer.readf64(RecieveBuffer, BLOCK_START + 2)
	local Y = buffer.readf64(RecieveBuffer, BLOCK_START + 10)
	local Z = buffer.readf64(RecieveBuffer, BLOCK_START + 18)
	local Value2 = Vector3.new(X, Y, Z)
	return Value1, Value2
end

local function ReadEVENT_CollidedWithPlayer(): (number, Vector3)
	-- Read BLOCK: 28 bytes
	local BLOCK_START = Read(28)
	local Value1 = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	local X = buffer.readf64(RecieveBuffer, BLOCK_START + 4)
	local Y = buffer.readf64(RecieveBuffer, BLOCK_START + 12)
	local Z = buffer.readf64(RecieveBuffer, BLOCK_START + 20)
	local Value2 = Vector3.new(X, Y, Z)
	return Value1, Value2
end

local function WriteEVENT_PlayerUpdatedSpeed(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	buffer.writeu32(SendBuffer, BLOCK_START + 1, Value)
end

local function ReadEVENT_UpdatePlayerState(): (number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function WriteEVENT_SendCoinsOnPlayerEntered(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 7)
	buffer.writeu32(SendBuffer, BLOCK_START + 1, Value)
end

local function WriteEVENT_PlayerCollidedWithForceApplier(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu32(SendBuffer, BLOCK_START + 1, Value)
end

local function WriteEVENT_PlayerReacheadNewCheckpoint(Value: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 8)
	buffer.writeu32(SendBuffer, BLOCK_START + 1, Value)
end

local function ReadEVENT_PlayerReachedFinishLine(): (nil)
	return nil
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	RaceStarted = {
		On = NOOP
	},
	RaceFinished = {
		On = NOOP
	},
	PlayerPlacementChanged = {
		On = NOOP
	},
	PlayerTakeDamage = {
		On = NOOP
	},
	CollidedWithPlayer = {
		On = NOOP
	},
	PlayerUpdatedSpeed = {
		Fire = NOOP
	},
	UpdatePlayerState = {
		On = NOOP
	},
	SendCoinsOnPlayerEntered = {
		Fire = NOOP
	},
	PlayerCollidedWithForceApplier = {
		Fire = NOOP
	},
	PlayerReacheadNewCheckpoint = {
		Fire = NOOP
	},
	PlayerReachedFinishLine = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: nil = ReadEVENT_RaceStarted()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"RaceStarted\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: nil = ReadEVENT_RaceFinished()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"RaceFinished\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: number = ReadEVENT_PlayerPlacementChanged()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"PlayerPlacementChanged\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 3 then
			local Value1: number, Value2: Vector3 = ReadEVENT_PlayerTakeDamage()
			if Events.Reliable[3] ~= nil then
				Events.Reliable[3](Value1, Value2)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"PlayerTakeDamage\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value1, Value2} :: {any})
			end
		elseif Index == 4 then
			local Value1: number, Value2: Vector3 = ReadEVENT_CollidedWithPlayer()
			if Events.Reliable[4] ~= nil then
				Events.Reliable[4](Value1, Value2)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"CollidedWithPlayer\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Value1, Value2} :: {any})
			end
		elseif Index == 6 then
			local Value: number = ReadEVENT_UpdatePlayerState()
			if Events.Reliable[6] ~= nil then
				Events.Reliable[6](Value)
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"UpdatePlayerState\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Value} :: {any})
			end
		elseif Index == 9 then
			local Value: nil = ReadEVENT_PlayerReachedFinishLine()
			if Events.Reliable[9] ~= nil then
				Events.Reliable[9](Value)
			else
				if #Queue.Reliable[9] > 256 then
					warn("[Blink]: Event queue of \"PlayerReachedFinishLine\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[9], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	RaceStarted = {
		On = function(Listener: (Value: nil) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				if Events.Reliable[0] == Listener then
					Events.Reliable[0] = nil
				end
			end
		end
	},
	RaceFinished = {
		On = function(Listener: (Value: nil) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				if Events.Reliable[1] == Listener then
					Events.Reliable[1] = nil
				end
			end
		end
	},
	PlayerPlacementChanged = {
		On = function(Listener: (Value: number) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				if Events.Reliable[2] == Listener then
					Events.Reliable[2] = nil
				end
			end
		end
	},
	PlayerTakeDamage = {
		On = function(Listener: (Value1: number, Value2: Vector3) -> ()): () -> ()
			Events.Reliable[3] = Listener
			for Index, Arguments in Queue.Reliable[3] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[3] = {}
			return function (): ()
				if Events.Reliable[3] == Listener then
					Events.Reliable[3] = nil
				end
			end
		end
	},
	CollidedWithPlayer = {
		On = function(Listener: (Value1: number, Value2: Vector3) -> ()): () -> ()
			Events.Reliable[4] = Listener
			for Index, Arguments in Queue.Reliable[4] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[4] = {}
			return function (): ()
				if Events.Reliable[4] == Listener then
					Events.Reliable[4] = nil
				end
			end
		end
	},
	PlayerUpdatedSpeed = {
		Fire = function(Value: number): ()
			WriteEVENT_PlayerUpdatedSpeed(Value)
		end
	},
	UpdatePlayerState = {
		On = function(Listener: (Value: number) -> ()): () -> ()
			Events.Reliable[6] = Listener
			for Index, Arguments in Queue.Reliable[6] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[6] = {}
			return function (): ()
				if Events.Reliable[6] == Listener then
					Events.Reliable[6] = nil
				end
			end
		end
	},
	SendCoinsOnPlayerEntered = {
		Fire = function(Value: number): ()
			WriteEVENT_SendCoinsOnPlayerEntered(Value)
		end
	},
	PlayerCollidedWithForceApplier = {
		Fire = function(Value: number): ()
			local Previous = Save()
			Load()
			WriteEVENT_PlayerCollidedWithForceApplier(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireServer(Buffer, SendInstances)
			Load(Previous)
		end
	},
	PlayerReacheadNewCheckpoint = {
		Fire = function(Value: number): ()
			WriteEVENT_PlayerReacheadNewCheckpoint(Value)
		end
	},
	PlayerReachedFinishLine = {
		On = function(Listener: (Value: nil) -> ()): () -> ()
			Events.Reliable[9] = Listener
			for Index, Arguments in Queue.Reliable[9] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[9] = {}
			return function (): ()
				if Events.Reliable[9] == Listener then
					Events.Reliable[9] = nil
				end
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL